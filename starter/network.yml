# CloudFormation template for creating a VPC with public and private subnets, NAT gateways, and route tables.
Description: hieuvn3-project2-vpc-network

# Parameters
Parameters:
  ProjectName:
    Type: String
    Description: Udacity project 2 cloudformation # Name of the project for tagging and resource identification

  VpcCIDR:
    Type: String
    Description: IP range for VPC network # CIDR block defining the range of IP addresses for the VPC

  PublicSubnet1CIDR:
    Type: String
    Description: IP range for public subnet 1  # CIDR block for the first public subnet

  PublicSubnet2CIDR:
    Type: String
    Description: IP range for public subnet 2 # CIDR block for the second public subnet

  PrivateSubnet1CIDR:
    Type: String
    Description: IP range for private subnet 1 # CIDR block for the first private subnet

  PrivateSubnet2CIDR:
    Type: String
    Description: IP range for private subnet 2 # CIDR block for the second private subnet

# Resources block defines the VPC, subnets, Internet Gateway, NAT Gateways, and routing tables
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsHostnames: true # Enable DNS hostnames for instances in the VPC
      Tags:
      - Key: Name
        Value: !Ref ProjectName

  InternetGateway:
    Type: AWS::EC2::InternetGateway # Internet Gateway to provide internet access to public subnets
    Properties:
      Tags:
      - Key: Name
        Value: !Ref ProjectName

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment # Attach the Internet Gateway to the VPC
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC # Associate the subnet with the VPC
      AvailabilityZone: !Select [0, !GetAZs ''] # Select the first availability zone
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value: !Sub ${ProjectName}-public-az-1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value: !Sub ${ProjectName}-public-az-2

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !Ref PrivateSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags:
      - Key: Name
        Value: !Sub ${ProjectName}-private-az-1

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: !Ref PrivateSubnet2CIDR
      MapPublicIpOnLaunch: false
      Tags:
      - Key: Name
        Value: !Sub ${ProjectName}-private-az-2

# Elastic IP for NAT Gateway
  NatGateway1EIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

  NatGateway2EIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

  NatGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGateway1EIP.AllocationId
      SubnetId: !Ref PublicSubnet1

  NatGateway2:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGateway2EIP.AllocationId
      SubnetId: !Ref PublicSubnet2
  
  # Public route table for managing internet-bound traffic
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub ${ProjectName}-public-route

  # Default route for public subnets to allow outbound internet traffic
  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  # Associate the route table with Public Subnet 
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub ${ProjectName}-private-1

  DefaultPrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet1

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub ${ProjectName}-private-2

  DefaultPrivateRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway2

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      SubnetId: !Ref PrivateSubnet2

Outputs:
  VPC:
    Description: VPC network 
    Value: !Ref VPC
    Export:
      Name: !Sub ${ProjectName}-vpc-id

  PublicSubnets:
    Description: public subnet for VPC network
    Value: !Join [",", [!Ref PublicSubnet1, !Ref PublicSubnet2]]
    Export:
      Name: !Sub ${ProjectName}-public-subnets

  PrivateSubnets:
    Description: private subnet for VPC network
    Value: !Join [",", [!Ref PrivateSubnet1, !Ref PrivateSubnet2]]
    Export:
      Name: !Sub ${ProjectName}-private-subnets

  PublicSubnet1:
    Description: first public subnet
    Value: !Ref PublicSubnet1
    Export:
      Name: !Sub ${ProjectName}-public-subnet-1

  PublicSubnet2:
    Description: second public subnet
    Value: !Ref PublicSubnet2
    Export:
      Name: !Sub ${ProjectName}-public-subnet-2

  PrivateSubnet1:
    Description: first private subnet 
    Value: !Ref PrivateSubnet1
    Export:
      Name: !Sub ${ProjectName}-private-subnet-1

  PrivateSubnet2:
    Description: second private subnet 
    Value: !Ref PrivateSubnet2
    Export:
      Name: !Sub ${ProjectName}-private-subnet-2
